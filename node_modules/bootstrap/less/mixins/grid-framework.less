// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.
// 列第一步
.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    // 递归 两个参数
    .col((@index + 1), @item);
  // .col(2, ".col-xs-@{1}, .col-sm-@{1}, .col-md-@{1}, .col-lg-@{1}")
  }
  // 两个参数  @grid-columns:12;
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
    // .col(3, ".col-xs-@{1}, .col-sm-@{1}, .col-md-@{1}, .col-lg-@{1}", ".col-xs-@{2}, .col-sm-@{2}, .col-md-@{2}, .col-lg-@{2}")
    /*
    when条件一直到的@index=12
    .col(12, @list)
    此时
    @list:
        ".col-xs-@{1}, .col-sm-@{1}, .col-md-@{1}, .col-lg-@{1}",
        ".col-xs-@{2}, .col-sm-@{2}, .col-md-@{2}, .col-lg-@{2}",
                          ...
        ".col-xs-@{12}, .col-sm-@{12}, .col-md-@{12}, .col-lg-@{12}"
     */

    /*
    .col(13, @list)
      调用下面的语句
      最终产生的结果
      @{list} =
       ".col-xs-@{1}, .col-sm-@{1}, .col-md-@{1}, .col-lg-@{1}",
       ".col-xs-@{2}, .col-sm-@{2}, .col-md-@{2}, .col-lg-@{2}",
                          ...
       ".col-xs-@{12}, .col-sm-@{12}, .col-md-@{12}, .col-lg-@{12}"{
            position: relative;
            min-height: 1px;
            padding-right: 15 ;
            padding-left: 15;
       }

     */
  }
  // 递归出口
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-right: floor((@grid-gutter-width / 2));
      padding-left: ceil((@grid-gutter-width / 2));
    }
  }
  .col(1); // kickstart it
}

.float-grid-columns(@class) {
  .col(@index) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it

  /*
  .col-@{class}-@{index}
    结果为:
    .col-xs-1 ... .col-xs-12{
        float: left;
    }

   */
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
/*
    .calc-grid-column(12, xs, width);
    生成结果为:
    .col-xs-12, .col-xs-11, ... , .col-xs-1{
        width: percentage((12 / 12));
        width: percentage((11 / 12));
                ...
        width: percentage((1 / 12));
    }
   */


.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
/*
生成结果为
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }

  .col-xs-push-12 {
    left: 12 / 12  也就是  100%
  }
  .col-xs-push-1 {
    left: 1 / 12
  }
  .col-xs-push-0 {
   left: auto
}
 */

// 区分.col-xs-push-0 的情况
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}


.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
/*
生成结果为
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }

  .col-xs-pull-12 {
    right: 12 / 12  也就是  100%
  }
  .col-xs-pull-1 {
    right: 1 / 12
  }
  .col-xs-pull-0 {
   right: auto
}
 */
// 区分.col-xs-pull-0
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}

/*
生成结果为
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }

  .col-xs-offset-12 {
    margin-left: 12 / 12  也就是  100%
  }
  .col-xs-offset-1 {
    margin-left: 1 / 12
  }
  .col-xs-offset-0 {
   margin-left: 0
}
 */
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS  入口
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// 列第二步
// Create grid for specific class
.make-grid(@class) {
  // 2.1  float
  .float-grid-columns(@class);
  // 2.2 width
  .loop-grid-columns(@grid-columns, @class, width);
  // 2.3 列排序 left|right
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  // 2.4 列偏移 margin left
  .loop-grid-columns(@grid-columns, @class, offset);
}
